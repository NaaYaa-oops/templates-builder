#!/usr/bin/env node
'use strict'
/**
 * @name Babel
 */
/**
 * @desc speed up instantiation time
 */
// require('v8-compile-cache')
const { transformFileSync } = require('@babel/core')
const BABEL_PLUGINS = {
  plugins: [
    '@babel/plugin-transform-modules-commonjs',
    '@babel/plugin-syntax-export-namespace-from',
  ],
}

/**
 * @name Utils
 */
const { existsSync, writeFileSync, rmSync, readFileSync } = require('fs')
const { generateHash } = require('../src/helpers/useGenerate')
const path = require('path')
const { build } = require(`${__dirname}/../src/index.js`)

/**
 * @name Config
 */
const externalConfig = getConfig()
const { templates: templatesFolderPath, ...config } = externalConfig || {}
/** @name*
 * @desc Insert undefined because we have a default function param
 */
const outputConfig = Object.keys(config).length > 0 ? config : undefined

if (templatesFolderPath) {
  /**
   * @name Templates from file
   */
  const transformedTemplatesFolderPath = path.resolve(
    __dirname,
    templatesFolderPath
  )
  const templatesFile = transformFileSync(
    transformedTemplatesFolderPath,
    BABEL_PLUGINS
  )
  const tempFilePath = `${__dirname}/${generateHash(2)}.js`

  /**
   * @name Parse file with templates
   */
  try {
    writeFileSync(tempFilePath, templatesFile.code)
    const externalTemplates = existsSync(tempFilePath) && require(tempFilePath)
    if (externalTemplates && config) {
      const templates = externalTemplates['default']
        ? externalTemplates['default']
        : externalTemplates
      Object.assign(config, { templates })
      rmSync(tempFilePath)
    }
  } catch {
    rmSync(tempFilePath)
  }
}

/**
 * @name Execute
 * */
build(outputConfig)

/**
 *
 * @desc Helpers functions
 *
 */

function getConfig() {
  const executorPath = process.cwd()
  const configFiles = ['tb.config.json', '.tbconfigrc']
  const config = configFiles.reduce((acc, file) => {
    const isExist = existsSync(`${executorPath}/${file}`)
    const content =
      isExist &&
      readFileSync(`${executorPath}/${file}`, {
        encoding: 'utf8',
      })
    const formattedContent = JSON.parse(content)
    return isExist ? Object.assign(acc, formattedContent) : acc
  }, {})
  return config
}
